#include <SPI.h>
#include <Adafruit_GFX.h>
#include <TFT_ILI9340.h>

#define __CS 10
#define __DC 9
#define __RST 14

// Color definitions
#define	BLACK   0x0000
#define	BLUE    0x001F
#define	RED     0xF800
#define	GREEN   0x07E0
#define CYAN    0x07FF
#define MAGENTA 0xF81F
#define YELLOW  0xFFE0  
#define WHITE   0xFFFF

float sin_d[] = { 
  0,0.17,0.34,0.5,0.64,0.77,0.87,0.94,0.98,1,0.98,0.94,
  0.87,0.77,0.64,0.5,0.34,0.17,0,-0.17,-0.34,-0.5,-0.64,
  -0.77,-0.87,-0.94,-0.98,-1,-0.98,-0.94,-0.87,-0.77,
  -0.64,-0.5,-0.34,-0.17 };
float cos_d[] = { 
  1,0.98,0.94,0.87,0.77,0.64,0.5,0.34,0.17,0,-0.17,-0.34,
  -0.5,-0.64,-0.77,-0.87,-0.94,-0.98,-1,-0.98,-0.94,-0.87,
  -0.77,-0.64,-0.5,-0.34,-0.17,0,0.17,0.34,0.5,0.64,0.77,
  0.87,0.94,0.98};
float d = 10;
float px[] = { 
  -d,  d,  d, -d, -d,  d,  d, -d };
float py[] = { 
  -d, -d,  d,  d, -d, -d,  d,  d };
float pz[] = { 
  -d, -d, -d, -d,  d,  d,  d,  d };

float p2x[] = {
  0,0,0,0,0,0,0,0};
float p2y[] = {
  0,0,0,0,0,0,0,0};

int r[] = {
  0,0,0};

int8_t cos_wave[512] =  
{
-128,-127,-127,-127,-127,-127,-127,-127,-127,-127,-127,-126,-126,-126,-126,-125,-125,-125,-124,-124,-124,-123,-123,-122,-122,-122,-121,-121,-120,-120,-119,-118,-118,-117,-117,-116,-115,-115,-114,-113,-112,-112,-111,-110,-109,-109,-108,-107,-106,-105,-104,-103,-102,-101,-101,-100,-99,-98,-97,-96,-94,-93,-92,-91,-90,-89,-88,-87,-86,-84,-83,-82,-81,-80,-78,-77,-76,-75,-73,-72,-71,-70,-68,-67,-66,-64,-63,-61,-60,-59,-57,-56,-55,-53,-52,-50,-49,-47,-46,-44,-43,-41,-40,-39,-37,-36,-34,-32,-31,-29,-28,-26,-25,-23,-22,-20,-19,-17,-16,-14,-12,-11,-9,-8,-6,-5,-3,-2,0,1,2,4,5,7,8,10,11,13,15,16,18,19,21,22,24,25,27,28,30,31,33,35,36,38,39,40,42,43,45,46,48,49,51,52,54,55,56,58,59,60,62,63,65,66,67,69,70,71,72,74,75,76,77,79,80,81,82,83,85,86,87,88,89,90,91,92,93,95,96,97,98,99,100,100,101,102,103,104,105,106,107,108,108,109,110,111,111,112,113,114,114,115,116,116,117,117,118,119,119,120,120,121,121,121,122,122,123,123,123,124,124,124,125,125,125,125,126,126,126,126,126,126,126,126,126,126,127,126,126,126,126,126,126,126,126,126,126,125,125,125,125,124,124,124,123,123,123,122,122,121,121,121,120,120,119,119,118,117,117,116,116,115,114,114,113,112,111,111,110,109,108,108,107,106,105,104,103,102,101,100,100,99,98,97,96,95,93,92,91,90,89,88,87,86,85,83,82,81,80,79,77,76,75,74,72,71,70,69,67,66,65,63,62,60,59,58,56,55,54,52,51,49,48,46,45,43,42,40,39,38,36,35,33,31,30,28,27,25,24,22,21,19,18,16,15,13,11,10,8,7,5,4,2,1,0,-2,-3,-5,-6,-8,-9,-11,-12,-14,-16,-17,-19,-20,-22,-23,-25,-26,-28,-29,-31,-32,-34,-36,-37,-39,-40,-41,-43,-44,-46,-47,-49,-50,-52,-53,-55,-56,-57,-59,-60,-61,-63,-64,-66,-67,-68,-70,-71,-72,-73,-75,-76,-77,-78,-80,-81,-82,-83,-84,-86,-87,-88,-89,-90,-91,-92,-93,-94,-96,-97,-98,-99,-100,-101,-101,-102,-103,-104,-105,-106,-107,-108,-109,-109,-110,-111,-112,-112,-113,-114,-115,-115,-116,-117,-117,-118,-118,-119,-120,-120,-121,-121,-122,-122,-122,-123,-123,-124,-124,-124,-125,-125,-125,-126,-126,-126,-126,-127,-127,-127,-127,-127,-127,-127,-127,-127,-127
};

uint8_t ucos_wave[512] = 
{
0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,3,3,3,4,4,5,5,5,6,6,7,7,8,9,9,10,10,11,12,12,13,14,15,15,16,17,18,18,19,20,21,22,23,24,25,26,26,27,28,29,30,31,33,34,35,36,37,38,39,40,41,43,44,45,46,47,49,50,51,52,54,55,56,57,59,60,61,63,64,66,67,68,70,71,72,74,75,77,78,80,81,83,84,86,87,88,90,91,93,95,96,98,99,101,102,104,105,107,108,110,111,113,115,116,118,119,121,122,124,125,127,129,130,132,133,135,136,138,139,141,143,144,146,147,149,150,152,153,155,156,158,159,161,163,164,166,167,168,170,171,173,174,176,177,179,180,182,183,184,186,187,188,190,191,193,194,195,197,198,199,200,202,203,204,205,207,208,209,210,211,213,214,215,216,217,218,219,220,221,223,224,225,226,227,228,228,229,230,231,232,233,234,235,236,236,237,238,239,239,240,241,242,242,243,244,244,245,245,246,247,247,248,248,249,249,249,250,250,251,251,251,252,252,252,253,253,253,253,254,254,254,254,254,254,254,254,254,254,255,254,254,254,254,254,254,254,254,254,254,253,253,253,253,252,252,252,251,251,251,250,250,249,249,249,248,248,247,247,246,245,245,244,244,243,242,242,241,240,239,239,238,237,236,236,235,234,233,232,231,230,229,228,228,227,226,225,224,223,221,220,219,218,217,216,215,214,213,211,210,209,208,207,205,204,203,202,200,199,198,197,195,194,193,191,190,188,187,186,184,183,182,180,179,177,176,174,173,171,170,168,167,166,164,163,161,159,158,156,155,153,152,150,149,147,146,144,143,141,139,138,136,135,133,132,130,129,127,125,124,122,121,119,118,116,115,113,111,110,108,107,105,104,102,101,99,98,96,95,93,91,90,88,87,86,84,83,81,80,78,77,75,74,72,71,70,68,67,66,64,63,61,60,59,57,56,55,54,52,51,50,49,47,46,45,44,43,41,40,39,38,37,36,35,34,33,31,30,29,28,27,26,26,25,24,23,22,21,20,19,18,18,17,16,15,15,14,13,12,12,11,10,10,9,9,8,7,7,6,6,5,5,5,4,4,3,3,3,2,2,2,1,1,1,1,0,0,0,0,0,0,0,0,0,0
};

int rainbowColors[180];

TFT_ILI9340 tft = TFT_ILI9340(__CS, __DC);

void setup() {
  tft.begin();
  tft.setBitrate(24000000);
  
  tft.setRotation(1);
  tft.setTextColor(0xFFFF,0x0000);

  
  for (int i=0; i<180; i++) {
    int hue = i*2;
    int saturation = 100;
    int lightness = 50;
    // pre-compute the 180 rainbow colors
    rainbowColors[i] = makeColor(hue, saturation, lightness);
  }
}


int centerX = 239;
int centerY = 319;
unsigned int color = 0;

void loop(void) {
  loop_plasma();
}

inline int8_t fastCosineCalc( uint16_t preWrapVal)
{
  return cos_wave[preWrapVal % 512];
}

inline uint8_t fastUCosineCalc( uint16_t preWrapVal)
{
  return ucos_wave[preWrapVal % 512];
}

void loop_plasma(void) {
  static unsigned int time = 1;
  time++;

  unsigned int newTime = micros();

  tft.setAddrWindow(0,0,320,240);

  for (int y=0; y < 240; y++)
  {
    for (int x=0; x < 320; x++)
    {
          int cx = (x-160) + fastCosineCalc(time*3)/8;
          int cy = (y-120) + fastCosineCalc(time*2 + 64)/8;
          int v1 = fastCosineCalc((cx*cx+cy*cy)/32+1+time);
          
          int v2 = fastCosineCalc(2*x+2*time);
          
          int v3 = fastCosineCalc(((x-64) * fastCosineCalc(time*5)/16) + ((y-64) * fastCosineCalc(time*4)/16) + time);
          
          int v = (v1+v2+v3);
          
          uint8_t r = fastUCosineCalc(v);
          uint8_t g = fastUCosineCalc(2*v+128);
          uint8_t b = fastUCosineCalc(3*v+256);
          
          tft.writedata16(((r & 0xF8) << 8) | ((g & 0xFC) << 3) | (b >> 3));
    }
  }
  tft.setCursor(0, 232);
  tft.printf("%06d", micros() - newTime);
}

void loop_oold(void) {
  // Test Text
  /*testText();
  delay(3000);*/
  
  // Test Color
  for (color = 0; color < 512; color++)
  {
  unsigned int newTime = micros();

  for (int x=0; x < 240; x++) {
    for (int y=0; y < 320; y++) {
      if(y > 7 || x > 35) {
        int index = color + ((x*2-centerX)*(x*2-centerX) + (y*2-centerY)*(y*2-centerY))/256;
        int oldIndex = index-1;
        tft.drawPixel(x,y, rainbowColors[index%180]);

        /*if(y < 32)
        {
          tft.drawPixel(x,y, x/4);
        }
        else if(y < 64)
        {
          tft.drawPixel(x,y, (x/2)<<5);
        }
        else if (y < 96)
        {
          tft.drawPixel(x,y, (x/4)<<11);
        }
        else
        {
          tft.drawPixel(x,y, 0b0000011111100000);
        }*/
      }
    }
  }
      tft.setCursor(0, 0);
      tft.printf("%06d", micros() - newTime);
  }
  /*for (color = 0; color < 512; color)
  {
    test3D();
    delay(15);

  }   */
}

void testText() {
  tft.fillScreen(0);
  tft.setCursor(0, 0);
  tft.setTextColor(RED);  
  tft.setTextSize(1);
  tft.println("Hello World!");

  tft.setTextColor(GREEN);  
  tft.setTextSize(2);
  tft.println("Hello World!");
  
  tft.setTextColor(BLUE);  
  tft.setTextSize(3);
  tft.println("Hello World!");
}

void test3D() {
  tft.fillScreen(WHITE);
  r[0]=r[0]+1;
  r[1]=r[1]+1;
  if (r[0] == 36) r[0] = 0;
  if (r[1] == 36) r[1] = 0;
  if (r[2] == 36) r[2] = 0;
  for (int i=0;i<8;i++)
  {
    float px2 = px[i];
    float py2 = cos_d[r[0]]*py[i] - sin_d[r[0]]*pz[i];
    float pz2 = sin_d[r[0]]*py[i] + cos_d[r[0]]*pz[i];

    float px3 = cos_d[r[1]]*px2 + sin_d[r[1]]*pz2;
    float py3 = py2;
    float pz3 = -sin_d[r[1]]*px2 + cos_d[r[1]]*pz2;

    float ax = cos_d[r[2]]*px3 - sin_d[r[2]]*py3;
    float ay = sin_d[r[2]]*px3 + cos_d[r[2]]*py3;
    float az = pz3-190;

    p2x[i] = ((tft.width())/2)+ax*500/az;
    p2y[i] = ((tft.height())/2)+ay*500/az;
  }
  for (int i=0;i<3;i++) {
    tft.drawLine(p2x[i],p2y[i],p2x[i+1],p2y[i+1],BLACK);
    tft.drawLine(p2x[i+4],p2y[i+4],p2x[i+5],p2y[i+5],BLACK);
    tft.drawLine(p2x[i],p2y[i],p2x[i+4],p2y[i+4],BLACK);
  }   
  tft.drawLine(p2x[3],p2y[3],p2x[0],p2y[0],BLACK);
  tft.drawLine(p2x[7],p2y[7],p2x[4],p2y[4],BLACK);
  tft.drawLine(p2x[3],p2y[3],p2x[7],p2y[7],BLACK);
}


